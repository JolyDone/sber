package com.example.sberbank.service;

import com.example.sberbank.client.ApiClient;
import com.example.sberbank.dto.FuelPriceDto;
import com.example.sberbank.model.Fuel;
import com.example.sberbank.model.FuelPrice;
import com.example.sberbank.model.GasStation;
import com.example.sberbank.repository.FuelPriceRepository;
import com.example.sberbank.repository.FuelRepository;
import com.example.sberbank.repository.GasStationRepository;
import jakarta.transaction.Transactional;
import jakarta.validation.Validator;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class FuelPriceService {

    private final ApiClient apiClient;
    private final FuelRepository fuelRepository;
    private final GasStationRepository gasStationRepository;
    private final FuelPriceRepository fuelPriceRepository;
    private final Validator validator;

    @Transactional
    public void loadAndSaveFuelPrices() {
        List<FuelPriceDto> fuelPriceDtos = apiClient.getFuelPrices();
        log.info("üîé –ü–æ–ª—É—á–µ–Ω–æ {} —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ", fuelPriceDtos.size());

        for (FuelPriceDto dto : fuelPriceDtos) {
            var violations = validator.validate(dto);
            if (!violations.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {}", dto);
                continue;
            }

            GasStation gasStation = gasStationRepository
                    .findByExternalId(dto.getStationId())
                    .orElse(null);
            if (gasStation == null) {
                log.warn("‚ö†Ô∏è –ê–ó–° —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—â–µ–Ω–æ", dto.getStationId());
                continue;
            }

            Fuel fuel = fuelRepository
                    .findByExternalIdAndGasStation(dto.getProductId(), gasStation)
                    .orElse(null);
            if (fuel == null) {
                log.warn("‚ö†Ô∏è –¢–æ–ø–ª–∏–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –ê–ó–° {}, –ø—Ä–æ–ø—É—â–µ–Ω–æ", dto.getProductId(), dto.getStationId());
                continue;
            }

            FuelPrice price = FuelPrice.builder()
                    .gasStation(gasStation)
                    .fuel(fuel)
                    .price(dto.getPrice())
                    .timestamp(LocalDateTime.now())
                    .build();

            fuelPriceRepository.save(price);
            log.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ü–µ–Ω–∞ {} –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞ {} –Ω–∞ –ê–ó–° {}", dto.getPrice(), fuel.getName(), gasStation.getName());
        }

        log.info("‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
    }
}

